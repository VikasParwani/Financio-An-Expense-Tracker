"use client"

import type React from "react"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { collection, addDoc, query, where, onSnapshot, deleteDoc, doc } from "firebase/firestore"
import { onAuthStateChanged } from "firebase/auth"
import { ArrowDownCircle, ArrowUpCircle, Loader2, LogOut, Plus, Trash2 } from 'lucide-react'

import { auth, db } from "@/lib/firebase"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Progress } from "@/components/ui/progress"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useToast } from "@/hooks/use-toast"

type Transaction = {
  id: string
  amount: number
  description: string
  category: string
  date: string
  type: "income" | "expense"
}

export default function DashboardPage() {
  const router = useRouter()
  const { toast } = useToast()
  const [loading, setLoading] = useState(true)
  const [user, setUser] = useState<any>(null)
  const [transactions, setTransactions] = useState<Transaction[]>([])
  const [isDialogOpen, setIsDialogOpen] = useState(false)

  // Separate state variables for form fields
  const [transactionType, setTransactionType] = useState<"income" | "expense">("expense")
  const [transactionAmount, setTransactionAmount] = useState("")
  const [transactionDescription, setTransactionDescription] = useState("")
  const [transactionCategory, setTransactionCategory] = useState("general")

  // Categories for expenses and income
  const expenseCategories = [
    "food",
    "transportation",
    "housing",
    "entertainment",
    "utilities",
    "healthcare",
    "education",
    "general",
  ]
  const incomeCategories = ["salary", "freelance", "investments", "gifts", "other"]

  useEffect(() => {
    console.log("Dashboard mounted, checking auth...")

    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      console.log("Auth state changed:", currentUser?.uid || "No user")

      if (currentUser) {
        setUser(currentUser)
        // Only load transactions after authentication is confirmed
        setTimeout(() => {
          console.log("Loading transactions for user:", currentUser.uid)
          loadTransactions(currentUser.uid)
        }, 1000) // Add a small delay to ensure auth is fully processed
      } else {
        console.log("No user found, redirecting to login")
        document.cookie = "auth=; path=/; max-age=0"
        router.push("/login")
      }
      setLoading(false)
    })

    return () => unsubscribe()
  }, [router])

  const loadTransactions = (userId: string) => {
    console.log("Creating Firestore query for user:", userId)
    try {
      const q = query(collection(db, "transactions"), where("userId", "==", userId))

      console.log("Setting up snapshot listener")
      const unsubscribe = onSnapshot(q, (querySnapshot) => {
        console.log("Snapshot received, docs:", querySnapshot.size)
        const transactionsData: Transaction[] = []
        querySnapshot.forEach((doc) => {
          const data = doc.data()
          transactionsData.push({
            id: doc.id,
            amount: data.amount,
            description: data.description,
            category: data.category,
            date: data.date,
            type: data.type,
          })
        })
        setTransactions(transactionsData)
      }, (error) => {
        console.error("Firestore snapshot error:", error)
      })

      return unsubscribe
    } catch (error) {
      console.error("Error in loadTransactions:", error)
    }
  }

  const handleAddTransaction = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!user) return

    try {
      const amount = Number.parseFloat(transactionAmount)
      if (isNaN(amount) || amount <= 0) {
        toast({
          title: "Invalid amount",
          description: "Please enter a valid amount",
          variant: "destructive",
        })
        return
      }

      // Create transaction object with separate state variables
      const transactionData = {
        userId: user.uid,
        amount,
        description: transactionDescription,
        category: transactionCategory,
        type: transactionType, // Use the separate state variable
        date: new Date().toISOString(),
      }

      console.log("Adding transaction:", transactionData)

      // Add to Firestore
      await addDoc(collection(db, "transactions"), transactionData)

      // Reset form fields
      setTransactionAmount("")
      setTransactionDescription("")
      setTransactionCategory("general")
      setTransactionType("expense")
      setIsDialogOpen(false)

      toast({
        title: "Transaction added",
        description: `Your ${transactionType} has been added successfully`,
      })
    } catch (error: any) {
      toast({
        title: "Error adding transaction",
        description: error.message || "Something went wrong",
        variant: "destructive",
      })
    }
  }

  const handleDeleteTransaction = async (id: string) => {
    try {
      await deleteDoc(doc(db, "transactions", id))

      toast({
        title: "Transaction deleted",
        description: "The transaction has been deleted successfully",
      })
    } catch (error: any) {
      toast({
        title: "Error deleting transaction",
        description: error.message || "Something went wrong",
        variant: "destructive",
      })
    }
  }

  const handleLogout = async () => {
    try {
      await auth.signOut()
      document.cookie = "auth=; path=/; max-age=0"
      router.push("/login")
    } catch (error: any) {
      toast({
        title: "Error logging out",
        description: error.message || "Something went wrong",
        variant: "destructive",
      })
    }
  }

  // Calculate totals and percentages
  const totalIncome = transactions.filter((t) => t.type === "income").reduce((sum, t) => sum + t.amount, 0)

  const totalExpense = transactions.filter((t) => t.type === "expense").reduce((sum, t) => sum + t.amount, 0)

  const balance = totalIncome - totalExpense

  // Calculate expense percentage (for progress bar)
  const expensePercentage = totalIncome > 0 ? Math.min(Math.round((totalExpense / totalIncome) * 100), 100) : 0

  if (loading) {
    return (
        <div className="flex items-center justify-center min-h-screen">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
    )
  }

  return (
      <div className="container mx-auto py-8 px-4 max-w-5xl">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold">Financio</h1>
          <Button variant="outline" onClick={handleLogout}>
            <LogOut className="h-4 w-4 mr-2" />
            Logout
          </Button>
        </div>

        {/* Summary Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <Card className="card-income">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Income</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-2xl font-bold text-green-500">₹{totalIncome.toFixed(2)}</p>
            </CardContent>
          </Card>

          <Card className="card-expense">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Expenses</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-2xl font-bold text-red-500">₹{totalExpense.toFixed(2)}</p>
            </CardContent>
          </Card>

          <Card className="card-balance">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Balance</CardTitle>
            </CardHeader>
            <CardContent>
              <p className={`text-2xl font-bold ${balance >= 0 ? "text-green-500" : "text-red-500"}`}>
                  ₹{balance.toFixed(2)}
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Expense Progress Bar */}
        <Card className="mb-8" >
          <CardHeader>
            <CardTitle>Expense Ratio</CardTitle>
            <CardDescription>You've spent {expensePercentage}% of your income</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2 progress-container" >
              <div className="progress-label">{expensePercentage}%</div>
              <Progress value={expensePercentage} className="h-4" />
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>0%</span>
                <span>50%</span>
                <span>100%</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Transactions List */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold">Recent Transactions</h2>
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Transaction
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Add New Transaction</DialogTitle>
                  <DialogDescription>Enter the details of your transaction below.</DialogDescription>
                </DialogHeader>
                <form onSubmit={handleAddTransaction}>
                  <div className="space-y-4 py-4">
                    {/* Transaction Type */}
                    <div className="space-y-2">
                      <Label>Transaction Type</Label>
                      <div className="flex gap-4">
                        <Button
                            type="button"
                            variant={transactionType === "expense" ? "default" : "outline"}
                            className={transactionType === "expense" ? "bg-red-500 hover:bg-red-600" : ""}
                            onClick={() => {
                              console.log("Setting type to expense")
                              setTransactionType("expense")
                              setTransactionCategory("general")
                            }}
                        >
                          Expense
                        </Button>
                        <Button
                            type="button"
                            variant={transactionType === "income" ? "default" : "outline"}
                            className={transactionType === "income" ? "bg-green-500 hover:bg-green-600" : ""}
                            onClick={() => {
                              console.log("Setting type to income")
                              setTransactionType("income")
                              setTransactionCategory("salary")
                            }}
                        >
                          Income
                        </Button>
                      </div>
                    </div>

                    {/* Current selection indicator */}
                    <div className="text-sm font-medium">
                      Currently adding: <span className={transactionType === "income" ? "text-green-500" : "text-red-500"}>
                      {transactionType === "income" ? "Income" : "Expense"}
                    </span>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="amount">Amount</Label>
                      <Input
                          id="amount"
                          type="number"
                          placeholder="0.00"
                          min="0.01"
                          step="0.01"
                          value={transactionAmount}
                          onChange={(e) => setTransactionAmount(e.target.value)}
                          required
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="description">Description</Label>
                      <Input
                          id="description"
                          placeholder="What was this for?"
                          value={transactionDescription}
                          onChange={(e) => setTransactionDescription(e.target.value)}
                          required
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="category">Category</Label>
                      <Select
                          value={transactionCategory}
                          onValueChange={setTransactionCategory}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select a category" />
                        </SelectTrigger>
                        <SelectContent>
                          {transactionType === "expense"
                              ? expenseCategories.map((category) => (
                                  <SelectItem key={category} value={category}>
                                    {category.charAt(0).toUpperCase() + category.slice(1)}
                                  </SelectItem>
                              ))
                              : incomeCategories.map((category) => (
                                  <SelectItem key={category} value={category}>
                                    {category.charAt(0).toUpperCase() + category.slice(1)}
                                  </SelectItem>
                              ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  <DialogFooter>
                    <Button type="submit">
                      Add {transactionType === "income" ? "Income" : "Expense"}
                    </Button>
                  </DialogFooter>
                </form>
              </DialogContent>
            </Dialog>
          </div>

          {transactions.length === 0 ? (
              <Card>
                <CardContent className="py-8 text-center text-muted-foreground">
                  No transactions yet. Add your first transaction to get started!
                </CardContent>
              </Card>
          ) : (
              <div className="space-y-4">
                {transactions
                    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
                    .map((transaction) => (
                        <Card key={transaction.id} className={`transaction-card ${transaction.type === "income" ? "card-income" : "card-expense"}`}>
                          <CardContent className="p-4">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center space-x-4">
                                <div
                                    className={`p-2 rounded-full ${
                                        transaction.type === "income" ? "bg-green-100" : "bg-red-100"
                                    }`}
                                >
                                  {transaction.type === "income" ? (
                                      <ArrowDownCircle className="h-5 w-5 text-green-500" />
                                  ) : (
                                      <ArrowUpCircle className="h-5 w-5 text-red-500" />
                                  )}
                                </div>
                                <div>
                                  <p className="font-medium">{transaction.description}</p>
                                  <p className="text-sm text-muted-foreground capitalize">
                                    {transaction.category} • {new Date(transaction.date).toLocaleDateString()}
                                    {/* Add type for debugging */}
                                    {" • "}
                                    <span className={transaction.type === "income" ? "text-green-500" : "text-red-500"}>
                              {transaction.type}
                            </span>
                                  </p>
                                </div>
                              </div>
                              <div className="flex items-center space-x-4">
                                <p className={`font-bold ${transaction.type === "income" ? "text-green-500" : "text-red-500"}`}>
                                  {transaction.type === "income" ? "+" : "-"}₹{transaction.amount.toFixed(2)}
                                </p>
                                <Button variant="ghost" size="icon" onClick={() => handleDeleteTransaction(transaction.id)}>
                                  <Trash2 className="h-4 w-4 text-muted-foreground" />
                                </Button>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                    ))}
              </div>
          )}
        </div>

        {/* Debug Component - Remove in production */}
        <div className="mt-8 p-4 bg-gray-100 rounded-md">
          <h3 className="font-bold mb-2">Debug Information</h3>
          <p>Current transaction type: {transactionType}</p>
          <p>Number of income transactions: {transactions.filter(t => t.type === "income").length}</p>
          <p>Number of expense transactions: {transactions.filter(t => t.type === "expense").length}</p>
          <div className="mt-2">
            <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  console.log("All transactions:", transactions);
                }}
            >
              Log Transactions
            </Button>
          </div>
        </div>
      </div>
  )
}